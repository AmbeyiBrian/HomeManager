# Generated by Django 5.2.1 on 2025-06-12 13:21

from django.db import migrations


def fix_null_base_roles(apps, schema_editor):
    """
    Fix any OrganizationRole records that have null base_role_id values.
    This can happen if there were legacy roles that weren't properly migrated.
    """
    OrganizationRole = apps.get_model('organizations', 'OrganizationRole')
    BaseRole = apps.get_model('organizations', 'BaseRole')
    
    # Get the default base role (Member) to assign to null records
    try:
        default_base_role = BaseRole.objects.get(slug='member')
    except BaseRole.DoesNotExist:
        # If Member doesn't exist, get any base role
        default_base_role = BaseRole.objects.first()
        if not default_base_role:
            print("ERROR: No base roles exist. Please run create_base_roles command first.")
            return
    
    # Find all OrganizationRole records with null base_role
    null_roles = OrganizationRole.objects.filter(base_role__isnull=True)
    
    if null_roles.exists():
        print(f"Found {null_roles.count()} OrganizationRole records with null base_role")
        
        for role in null_roles:
            # Assign the default base role
            role.base_role = default_base_role
            role.save()
            print(f"Fixed OrganizationRole {role.id} - assigned base_role: {default_base_role.name}")
        
        print(f"Successfully fixed {null_roles.count()} OrganizationRole records")
    else:
        print("No OrganizationRole records with null base_role found")


def reverse_fix_null_base_roles(apps, schema_editor):
    """
    Reverse operation - not really applicable for this data migration.
    """
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('organizations', '0004_add_base_role_system'),
    ]

    operations = [
        migrations.RunPython(fix_null_base_roles, reverse_fix_null_base_roles),
    ]
